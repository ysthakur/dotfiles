# Session variables set through Nix Home Manager
source ~/.nix-profile/etc/profile.d/hm-session-vars.sh

# Start zellij on startup but only if in interactive shell and terminal big enough
if [[ $- == *i* ]] && [[ $(command -v zellij) ]] && [[ $(tput lines) > 15 ]] && [[ -z "$ZELLIJ" ]]; then
    if [[ "$ZELLIJ_AUTO_ATTACH" == "true" ]]; then
        exec zellij attach -c
    else
        exec zellij
    fi

    if [[ "$ZELLIJ_AUTO_EXIT" == "true" ]]; then
        exit
    fi
fi

# '-' and '_' interchangeable in completions. Case-sensitive completion must be off.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

HIST_STAMPS="yyyy-mm-dd"
HISTFILE=~/.zsh_history
HISTSIZE=5000
SAVEHIST=5000
# Persist history
setopt APPEND_HISTORY
# Remove old commands if duplicated
setopt HIST_IGNORE_ALL_DUPS

HISTORY_IGNORE='(git commit (--amend *|-am *))'
# Don't remember lines starting with a space
setopt HIST_IGNORE_SPACE

# Never autosuggest anything from history over 60 chars
ZSH_AUTOSUGGEST_HISTORY_IGNORE='((?(#c60,))|git commit (--amend *|-am *)|chezmoi git -- commit *|wget *)'
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=240'

# Ask to correct command if typoed
setopt CORRECT

export TERM=xterm-256color

# Tell Zsh to look for completions generated by man-completions
fpath=(~/generated-completions $fpath)

# Zinit installation
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# User configuration

## Begin zinit stuff
zinit light chisui/zsh-nix-shell
zinit light nix-community/nix-zsh-completions

zinit ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”; zstyle ":completion:*" menu select'
zinit light trapd00r/LS_COLORS

zinit wait lucid depth=1 for \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  atinit"zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions
## End zinit stuff

# Enable keys/shortcuts
WORDCHARS=''
bindkey "^[[1;5C" forward-word   # Ctrl+Right
bindkey "^[[1;5D" backward-word  # Ctrl+Left
bindkey "^[[H" beginning-of-line # Home
bindkey "^[[F" end-of-line       # End
bindkey "^[[3~" delete-char      # Delete
bindkey "^[[Z" reverse-menu-complete # Shift-Tab to go to previous completion suggestion

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

export PATH="$PATH:$HOME/.local/bin:$HOME/bin"

# Carapace completions
zstyle ':completion:*' format $'\e[2;37mCompleting %d\e[m'
source <(carapace _carapace)

# Colored output for ls with human readable sizes
#alias ls="ls --color=auto --classify --human-readable"
alias ls="exa --classify --header --git --group"

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Shell hook for mise version manager
eval "$(mise activate zsh)"

# Python virtualenvs
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
VIRTUALENV_WRAPPER=$(command -v virtualenvwrapper.sh) && test -f $VIRTUALENV_WRAPPER && source $VIRTUALENV_WRAPPER

export PATH="$HOME/bin:$PATH"

# Setup Zoxide
eval "$(zoxide init zsh)"

# Setup oh-my-posh for prompt
eval "$(oh-my-posh init zsh --config $HOME/my_prompt_theme.omp.json)"

# Setup direnv
# TODO possibly use Zinit's recommended way instead
eval "$(direnv hook zsh)"

# Don't make .NET complain about not finding a valid ICU package
export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
export DOTNET_ROOT=$HOME/.dotnet
export PATH="$PATH:$HOME/.dotnet:$HOME/.dotnet/tools"

